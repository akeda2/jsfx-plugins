desc:Reverse proximity compensating bass boost and bass shuffle

import cookdsp.jsfx-inc

slider1:6<0,18,0.1>Reverse proximity compensating bass boost (dB)
slider2:120<30,300,0.5>Bass boost frequency (Hz)
slider3:0<-12,24,0.5>Bass shuffle (dB)
slider4:80<40,300,0.5>Bass shuffle frequency (Hz)
slider5:0<-6,6,0.1>Wide MF-squeek notch (dB)
slider6:3500<1000,10000,1>MF-squeek notch frequency (Hz)
slider7:0.5<0.1,2,0.1>MF-squeek notch q

@init
bpos=0;
//reverse roximity compensating bass boost
RBB.eq(slider2,1,slider1,1);
LBB.eq(slider2,1,slider1,1);
//Bass shuffle
SBS.eq(slider3,1,slider4,1);
//Squeek-notch
LSN.eq(slider6,slider7,slider5,0);
RSN.eq(slider6,slider7,slider5,0);


@slider
something=slider1*srate;

//reverse proximity compensating bass boost
RBB.eq_set_freq(slider2);
LBB.eq_set_freq(slider2);
RBB.eq_set_boost(slider1);
LBB.eq_set_boost(slider1);
//Bass shuffle
SBS.eq_set_freq(slider4);
SBS.eq_set_boost(slider3);
//Squeek-notch
LSN.eq_set_freq(slider6);
RSN.eq_set_freq(slider6);
LSN.eq_set_boost(slider5);
RSN.eq_set_boost(slider5);
LSN.eq_set_q(slider7);
RSN.eq_set_q(slider7);


@block
blah+=samplesblock;

@sample

slider1 != 0 ? (
 spl0 = LBB.eq_do(spl0);
 spl1 = RBB.eq_do(spl1);
 );
 
slider3 != 0 ? (
 mid = (spl0+spl1)*0.5;
 side = (spl0-spl1)*0.5;
 side = SBS.eq_do(side);
 spl0 = mid+side;
 spl1 = mid-side;
 );
 
slider5 != 0 ? (
 spl0 = LSN.eq_do(spl0);
 spl1 = RSN.eq_do(spl1);
 );

spl0=spl0;
spl1=spl1;

